#Pandas Time Series Analysis Tutorial: date_range
import pandas as pd
df = pd.read_csv("aapl_no_dates.csv")
df.head()
'''
Open	High	Low	Close	Volume
0	153.17	153.33	152.22	153.18	16404088
1	153.58	155.45	152.89	155.45	27770715
2	154.34	154.45	153.46	153.93	25331662
3	153.90	155.81	153.78	154.45	26624926
4	155.02	155.98	154.48	155.37	21069647
'''
rng = pd.date_range(start="6/1/2016",end="6/30/2016",freq='B')# you can create your own datetime index and asign it to your data as index using the business days
rng
'''
DatetimeIndex(['2016-06-01', '2016-06-02', '2016-06-03', '2016-06-06',
               '2016-06-07', '2016-06-08', '2016-06-09', '2016-06-10',
               '2016-06-13', '2016-06-14', '2016-06-15', '2016-06-16',
               '2016-06-17', '2016-06-20', '2016-06-21', '2016-06-22',
               '2016-06-23', '2016-06-24', '2016-06-27', '2016-06-28',
               '2016-06-29', '2016-06-30'],
              dtype='datetime64[ns]', freq='B')
'''
df.set_index(rng, inplace=True) # you can asign it in this way
df.head()
'''
Open	High	Low	Close	Volume
2016-06-01	153.17	153.33	152.22	153.18	16404088
2016-06-02	153.58	155.45	152.89	155.45	27770715
2016-06-03	154.34	154.45	153.46	153.93	25331662
2016-06-06	153.90	155.81	153.78	154.45	26624926
2016-06-07	155.02	155.98	154.48	155.37	21069647
Finding missing dates from datetimeindex
'''
daily_index = pd.date_range(start="6/1/2016",end="6/30/2016",freq='D')# you can create your own datetime index and asign it to your data as index using all the days
daily_index
'''
DatetimeIndex(['2016-06-01', '2016-06-02', '2016-06-03', '2016-06-04',
               '2016-06-05', '2016-06-06', '2016-06-07', '2016-06-08',
               '2016-06-09', '2016-06-10', '2016-06-11', '2016-06-12',
               '2016-06-13', '2016-06-14', '2016-06-15', '2016-06-16',
               '2016-06-17', '2016-06-18', '2016-06-19', '2016-06-20',
               '2016-06-21', '2016-06-22', '2016-06-23', '2016-06-24',
               '2016-06-25', '2016-06-26', '2016-06-27', '2016-06-28',
               '2016-06-29', '2016-06-30'],
              dtype='datetime64[ns]', freq='D')
'''
daily_index.difference(df.index) # you can obtain the difference of two date indexes
'''
DatetimeIndex(['2016-06-04', '2016-06-05', '2016-06-11', '2016-06-12',
               '2016-06-18', '2016-06-19', '2016-06-25', '2016-06-26'],
              dtype='datetime64[ns]', freq=None)
Benefits of having DatetimeIndex
%matplotlib inline
df.Close.plot()
<matplotlib.axes._subplots.AxesSubplot at 0x1b5d2a2ffd0>
'''
df["2016-06-01":"2016-06-10"].Close.mean()
'''
152.72125
'''
asfreq
df.index
'''
DatetimeIndex(['2016-06-01', '2016-06-02', '2016-06-03', '2016-06-06',
               '2016-06-07', '2016-06-08', '2016-06-09', '2016-06-10',
               '2016-06-13', '2016-06-14', '2016-06-15', '2016-06-16',
               '2016-06-17', '2016-06-20', '2016-06-21', '2016-06-22',
               '2016-06-23', '2016-06-24', '2016-06-27', '2016-06-28',
               '2016-06-29', '2016-06-30'],
              dtype='datetime64[ns]', freq='B')
              '''
df.asfreq('D',method='pad') # as frequency allow you to reindex your data based on the frecuency in this case in all the days 
'''
Open	High	Low	Close	Volume
2016-06-01	153.17	153.33	152.22	153.18	16404088
2016-06-02	153.58	155.45	152.89	155.45	27770715
2016-06-03	154.34	154.45	153.46	153.93	25331662
2016-06-04	154.34	154.45	153.46	153.93	25331662
2016-06-05	154.34	154.45	153.46	153.93	25331662
2016-06-06	153.90	155.81	153.78	154.45	26624926
2016-06-07	155.02	155.98	154.48	155.37	21069647
2016-06-08	155.25	155.54	154.40	154.99	21250798
2016-06-09	155.19	155.19	146.02	148.98	64882657
2016-06-10	145.74	146.09	142.51	145.42	72307330
2016-06-11	145.74	146.09	142.51	145.42	72307330
2016-06-12	145.74	146.09	142.51	145.42	72307330
2016-06-13	147.16	147.45	145.15	146.59	34165445
2016-06-14	147.50	147.50	143.84	145.16	31531232
2016-06-15	143.32	144.48	142.21	144.29	32165373
2016-06-16	143.78	144.50	142.20	142.27	50361093
2016-06-17	143.66	146.74	143.66	146.34	32541404
2016-06-18	143.66	146.74	143.66	146.34	32541404
2016-06-19	143.66	146.74	143.66	146.34	32541404
2016-06-20	146.87	146.87	144.94	145.01	24900073
2016-06-21	145.52	146.07	144.61	145.87	21265751
2016-06-22	145.77	146.70	145.12	145.63	19106294
2016-06-23	145.13	147.16	145.11	146.28	35439389
2016-06-24	147.17	148.28	145.38	145.82	25692361
2016-06-25	147.17	148.28	145.38	145.82	25692361
2016-06-26	147.17	148.28	145.38	145.82	25692361
2016-06-27	145.01	146.16	143.62	143.73	24761891
2016-06-28	144.49	146.11	143.16	145.83	22082432
2016-06-29	144.71	145.13	142.28	143.68	31499368
2016-06-30	144.45	144.96	143.78	144.02	23024107
'''
df.asfreq('W',method='pad') # in this case weekly
'''
Open	High	Low	Close	Volume
2016-06-05	154.34	154.45	153.46	153.93	25331662
2016-06-12	145.74	146.09	142.51	145.42	72307330
2016-06-19	143.66	146.74	143.66	146.34	32541404
2016-06-26	147.17	148.28	145.38	145.82	25692361
'''
df.asfreq('H',method='pad') # in this case every hour
'''
Open	High	Low	Close	Volume
2016-06-01 00:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 01:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 02:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 03:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 04:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 05:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 06:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 07:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 08:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 09:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 10:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 11:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 12:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 13:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 14:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 15:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 16:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 17:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 18:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 19:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 20:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 21:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 22:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-01 23:00:00	153.17	153.33	152.22	153.18	16404088
2016-06-02 00:00:00	153.58	155.45	152.89	155.45	27770715
2016-06-02 01:00:00	153.58	155.45	152.89	155.45	27770715
2016-06-02 02:00:00	153.58	155.45	152.89	155.45	27770715
2016-06-02 03:00:00	153.58	155.45	152.89	155.45	27770715
2016-06-02 04:00:00	153.58	155.45	152.89	155.45	27770715
2016-06-02 05:00:00	153.58	155.45	152.89	155.45	27770715
...	...	...	...	...	...
2016-06-28 19:00:00	144.49	146.11	143.16	145.83	22082432
2016-06-28 20:00:00	144.49	146.11	143.16	145.83	22082432
2016-06-28 21:00:00	144.49	146.11	143.16	145.83	22082432
2016-06-28 22:00:00	144.49	146.11	143.16	145.83	22082432
2016-06-28 23:00:00	144.49	146.11	143.16	145.83	22082432
2016-06-29 00:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 01:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 02:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 03:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 04:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 05:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 06:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 07:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 08:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 09:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 10:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 11:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 12:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 13:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 14:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 15:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 16:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 17:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 18:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 19:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 20:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 21:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 22:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-29 23:00:00	144.71	145.13	142.28	143.68	31499368
2016-06-30 00:00:00	144.45	144.96	143.78	144.02	23024107
697 rows Ã— 5 columns
'''

#generating DatetimeIndex with periods argument
rng = pd.date_range('1/1/2011', periods=72, freq='H') # you can generate date ranges without the end date only using the periods and the frecuency
rng
'''
DatetimeIndex(['2011-01-01 00:00:00', '2011-01-01 01:00:00',
               '2011-01-01 02:00:00', '2011-01-01 03:00:00',
               '2011-01-01 04:00:00', '2011-01-01 05:00:00',
               '2011-01-01 06:00:00', '2011-01-01 07:00:00',
               '2011-01-01 08:00:00', '2011-01-01 09:00:00',
               '2011-01-01 10:00:00', '2011-01-01 11:00:00',
               '2011-01-01 12:00:00', '2011-01-01 13:00:00',
               '2011-01-01 14:00:00', '2011-01-01 15:00:00',
               '2011-01-01 16:00:00', '2011-01-01 17:00:00',
               '2011-01-01 18:00:00', '2011-01-01 19:00:00',
               '2011-01-01 20:00:00', '2011-01-01 21:00:00',
               '2011-01-01 22:00:00', '2011-01-01 23:00:00',
               '2011-01-02 00:00:00', '2011-01-02 01:00:00',
               '2011-01-02 02:00:00', '2011-01-02 03:00:00',
               '2011-01-02 04:00:00', '2011-01-02 05:00:00',
               '2011-01-02 06:00:00', '2011-01-02 07:00:00',
               '2011-01-02 08:00:00', '2011-01-02 09:00:00',
               '2011-01-02 10:00:00', '2011-01-02 11:00:00',
               '2011-01-02 12:00:00', '2011-01-02 13:00:00',
               '2011-01-02 14:00:00', '2011-01-02 15:00:00',
               '2011-01-02 16:00:00', '2011-01-02 17:00:00',
               '2011-01-02 18:00:00', '2011-01-02 19:00:00',
               '2011-01-02 20:00:00', '2011-01-02 21:00:00',
               '2011-01-02 22:00:00', '2011-01-02 23:00:00',
               '2011-01-03 00:00:00', '2011-01-03 01:00:00',
               '2011-01-03 02:00:00', '2011-01-03 03:00:00',
               '2011-01-03 04:00:00', '2011-01-03 05:00:00',
               '2011-01-03 06:00:00', '2011-01-03 07:00:00',
               '2011-01-03 08:00:00', '2011-01-03 09:00:00',
               '2011-01-03 10:00:00', '2011-01-03 11:00:00',
               '2011-01-03 12:00:00', '2011-01-03 13:00:00',
               '2011-01-03 14:00:00', '2011-01-03 15:00:00',
               '2011-01-03 16:00:00', '2011-01-03 17:00:00',
               '2011-01-03 18:00:00', '2011-01-03 19:00:00',
               '2011-01-03 20:00:00', '2011-01-03 21:00:00',
               '2011-01-03 22:00:00', '2011-01-03 23:00:00'],
              dtype='datetime64[ns]', freq='H')
'''
import numpy as np
ts = pd.Series(np.random.randint(0,10,len(rng)), index=rng) #you can generate values for the indexes that you created before
ts.head(20)
'''
2011-01-01 00:00:00    9
2011-01-01 01:00:00    0
2011-01-01 02:00:00    3
2011-01-01 03:00:00    5
2011-01-01 04:00:00    9
2011-01-01 05:00:00    6
2011-01-01 06:00:00    1
2011-01-01 07:00:00    9
2011-01-01 08:00:00    2
2011-01-01 09:00:00    5
2011-01-01 10:00:00    0
2011-01-01 11:00:00    6
2011-01-01 12:00:00    2
2011-01-01 13:00:00    3
2011-01-01 14:00:00    1
2011-01-01 15:00:00    3
2011-01-01 16:00:00    1
2011-01-01 17:00:00    8
2011-01-01 18:00:00    5
2011-01-01 19:00:00    2
Freq: H, dtype: int32
'''